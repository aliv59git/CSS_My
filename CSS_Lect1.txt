

Записки по лекцията 1 за CSS - 27.04.2015 г. Дончо Минков


Препроцесорите Less, Sass, Style, 

Тук едно нещо може да се направи по много различни начини. Важно е да проверяваме домашни. 

Изпита: HTML- няма да го променяме. Да го стилизираме. до получаване на 1 или няколко картинки. 

Ще има няколко картинки. една без промяна и другите с hover върху отванящото се меню. 

Трябва да е 1:1  всичко имплементирано така че да е Пиксел пърфект на един браузър. Трябва да е същия цвят и до пиксел същия по размер. „

При фронт.-енд курсовете - на всички браузъри да е Пиксел- пърфект. Препроцесорите - можем да използваме. 

Ресурси: 

MDN= за учене на Web Platform CSS - Reference, Tutorial, Dema, ;

https://docs.webplatform.org/wiki/css

SublimeText, WebStrom, VisualStudio.

За домашните :  необходими са само .html, css, js,  и това е също изображения. Това е задължителното. Не трябва .sln  да се пращат целите. 

a{text} tab - дава текста като съдържание на таговете, използвани при съкратеното въвеждане на тагове. 

Зако каскадни. Стиловете се наследяват. Има значение как селектираме. Някои се наследяват. Цвят, Стилизирайки нещо на родителя, получават го и наследниците. 

Селектор - стилът се прилага за всички тагове, които са поставени. След всяка декларация слагаме ; задължително!!!

Имаме три вида селектори. 

- Селектор по тип на тага

- Селектор по клас - Когато искаме да селектираме няколко елемента с този клас. 

- Селектор по id; Когато селектираме точно един елемент

Със , можем да изреждаме не само тагове, но и други селектори: класове, и др. 

Нестет селектори. 

div p {} прилага се за всички селектори p, намиращи се в div. Нищо, че има други междинни тагове между div и  p  независимо колко навътре е р. 

div>p  селектира всички р, които имат директен родител div. 

zen coding    го прекръстиха в  emet coding

има и +  - маркира ни елементът, който е след предишния елемент. от същия тип/ранг

display: none; - скрива се но е там. 

* - селектира всичко  - не се използва много

* :hover 

Браузърът изпълнява селекторите отдясно наляво. Добре е най-десния селектор да е клас или id;

Има комплексни селектори. 

" " (space) e невалиден символ за клас. приема и двете имена. като класове. 

.first.second селектира тези които имат и двата класа 

type selectora да е първи.  

Поставяне ин лайн. в тага стила - не е добре. Стайл атрибутът се използва с JS 

Ембедване през <style> тага. 

<link rel ="stylesheet" type="text/css" href = "styles.css" />  - така се добавя в head - тага. Така css файла се кешира, по-бързо работи. 

http://www.csszengarden.com/216/

bootstrap CDN 

Първо се стилизират всички html  елементи. 

Освен <link>  има и други начини за ембедване на css. 

@import url("styles.css") при файлове с различен css се аплайва последния. 

a[title] - атрибут селектор. а имащ този атрибут. 
  
a[title = very]{}  селектира по опр. атрибути. 
a[title*=.....]
a[title^=..........]
a[title$=.....]

в името ако има space - трябва да е в кавички. 

Псевдо селектори :......

:hover,   - може да го приложи върху 1 елемент или върху групата над този елемевнт или още по-нагоре 

:visited, :first-line  - прилага се само върху първата линия независимо от размера на прозореца.   :active  :lang

:first-letter  :before   :after     a: after{
 content = ',';
 }   аналогично при :before 

Structural Pseudo classes, 

ul li : nth-of-type(2n)
(2n+1)  може и с различна формула да се прилага. 

nth-last-of-type   nth -child   

При радиобутоните name = "radios[]" по конвенция  да e с []

Е ~   - дай ми родителите на елемента

Цветове хексадецимал и децимал. rgb(255 255 255) децимал
#hexadeciaml     rgba - a - видимост от 0 до 1.

Трябва да внимаваме със стиловете наготово, които ни идват от браузърите. Да ги нулираме в началото на CSS  файла. 

body, li, p, div, padding margin, .....reset

# - 100   . - 10  tag - 1  *-0;  тежест на селекторите. 

selector wars - за приоритетите на селекторите. 

! important - дава 1000000 приоритет на съответния селектор.





Записки по лекцията на Дончо 29.04.15 CSS presentation

Стилизиране на тест цвят, размер вид на цвета. font-family. 

- color: # 000 черен цвят. fff  бял  Цвета се наследява. 

- font-size:  /Също се наследява Добре е да го дадем, тъй като на различните браузъри е различно. дефолтния сайз.

Добрата практика е да зададем някакъв фонт сайз и другите да са с em: 1.4em,  2.5 em. Ако имаме само em- лесно може да го променяме с основния размер на фонта.  Дофолтния го задаваме като font-size на body. 

Ако не го зададем, от браузъра идват дефолтните стойности. 

Освен em имаме rem  При вътрешни елементи с пропорционално растене на шрифта, rem запазва големината без скалиращо уголемяване. „

Да даваме размера в px а да избягваме x-large, xx-large small.....xx-small  и т.н. 

Когато задаваме font-family да задаваме няколко шрифта. 

- font-weight: 100 - 900 - през 100.  Тук може да даваме bold, bolder ... 

Визуално повечето шрифтове имат 2 или 3 удебелявания видими на екрана. 

Затова тук се използват  -  normal, bold, light 

- font-style:  normal, italic;  strong и em са тагове които са семантични, но не винаги ги използваме тях. 

Ако искаме да наблягаме strong а не винаги bold. Наблягането може да бъде и с друг цвят, 

- text-decoration: blink - да не се използва защото дразни обикновено. Не се поддържа на всички браузъри. 
underline; line-through, double-underline, none, При ресет в началото на css - text-decoration: none;

a: hover - тогава да се вижда. 

-  text-align:  left, right, justify, center
- font-variant : normal, 

- line-height: - височина на линията.  
font-style
font-variant
font-weight;
font-size;
font-height;
font-family  в този ред при задаване наведнъж на шрифта:
 
font: italic normal normal 16/18 Verdana

Можем да си генерираме наш фонд. 
@font-face{
 font-family: SketchRockwell;
 src: url('SketckRockwell-Bold.ttf')
 font-size;
}
В Google  си търсим фонтове -->  google fonts 

По аналогичен начин си търсим и поставяме фонтове

- text-shadow - 15px 10px 1px #.....   "-" сянката отива нагоре. иначе е надолу. надясно

horizontal - vertical - blur-radius - shadow - color

- text overflow: ellipsis/clip   Едното реже текста, слага ... , другото го скрива.   

- word-wrap: normal/break-word; 

Borders

border-width
border-color
border-style: hidden, none, dotted, dashed, solid, double, groove, ridge, inset, outset. 
 Използва се при бутончета. Ако искаме преливка на цветовете правим три или повече дива, и всеки си има съответния цвят. Така се постига ефекта. 

Ако искаме да махнем бордера - border: none; border: 0; Може и двете, но се използва последното. 

Градиенти 

border: 8px 
-moz-box-bottom-colors: .......#.. #...#...#;
-wiebkit-box....
-box-shadow: ....
префикси. за различните браузъри. 

border-radius: 30px;  - заобляне на правоъгълничето. 



Продължение на лекцията на Дончо 29.04.15 г.

При бордерите:
 white-space: 
overflow: hidden;
text-overflow: ellipsis;

Background

background-color: lightblue;
background-image: url("node.png")

background-repeat: repeat-x/repeat-y/repeat;

background-attachment: scroll;  Изображението от бекграунда остава, докато текста се скролва. 

background-position:  10px 50px  отдясно и отгоре. 

Когато картинката е част от съдържанието - лого, в презентация и др. се прави с image но ако е за стилизиране, - картинката се слага в background-image.

Спрайт - 4 картинки, слагат се в една. След това се ползват за background-image;
Изрязва се картинката която ни трябва и се позиционира- Става автоматизирано. нареждането им в един спрайт -. една картинка, и после цялото влиза в бекграунда. 

Градиенти

background: linear-gradient(to bottom, black, 50 %, yellow, ......);   това е синтаксиса. 
могат да се дават много цветове, да се дават проценти и т.н. Може да имаме поне 2 цвята 

На браузърите се поддържа по различен начин. CSS Gradient Generator.

Селектираме 1 пиксел в която копираме това като картинка. 

В Градиент генератора - вкарваме долу в дясно нашата картинка. и от нея може да прави градиент. 
в import from image; Горе може да сложим размер. в Градиент Генератора. Ако искаме да разпънем един градиент само без background-repeat.

Multiple background

Opacity; Работи като alpha - канала.  за цвят. 
Ако има нестване - то се натрупва. 0.5 * 0.5 например 

при opacity: 0;  си заема мястото, но не се вижда. 

Не работи на всички браузъри но префикса е лесен: 
-o-opacity: 

zoom: 1;   поставя се за да се изпълни  тази функция, за да се изпълни Поставя се накрая
за да работи 




Записки по лекцията CSS Layout  Ники, 4.05.2015 г.

Позициониране, скриване на елемевнти, боксиг модела, залепяне на елементи отляво и отдясно

width -  Когато имаме само блоков елемент. За да има ефект от това проперти. Ако не е блоков, няма да има ефект. px, %, 

p, div по подразбиране заемат 100 % от даденото му. 

min-width  - не може да е по-малък елемента независимо от съдържанието
max-width - не може да е по-голям елемента. независимо от съдържанието

На in-line /линейните елементи не влияе width; display:block; - тогава ще действа. 

При зумване - тези с % се изобразяват добре, докато фиксираните - не чак толкова. 

hight - px, cm, %, Отново като width - се прилага само върху блокови елементи. 

in-line елементите зависи височината от съдържанието.- докато при блоковите се задават. 

min-higth    max-hight

overflow: как се държи съдържанието вътре в кутийката. Контролираме държанието на по-голямо съдържание

:visible - съдържанието се вижда въпреки размерите на кутийката Излиза извън рамките все едно че няма кутия. 

:auto - дали трябва да има scrollbar

:scroll - винаги сложи scrollbar

:hidden - скрива съдържанието извън кутийката. 

Най-често се използва overflow: auto;

display: - можем да променим спановете да са блокови елементи, някои блокови пък да се държат като линейни 

:inline - поведение като нестилизиран <span> Типично поведение на инлайн елемент. 

:block - поведение като на <div>
 
:none - Eлементът бива скрит и не заема никакво място. Все едно че изчезва. Нещата около него се държат все едно че не съществува. 

При visibility: hidden елементът го има и другите се съобразяват с него. Запазва му се размера

Друг елемент да скрием елемент е opacity: 0; 

:inline-block - може да има hight width но се държи като ин-лайн елемент. 

li - по условие са блокови елементи Ако им дадем inline-block  са в 1 ред. 

Да разгледаме и другите стойности на display: 

initial - Сложи дефолтната стойност ! 

inherit - Използвай родителската стойност. И тук така може да се избегне повторение на код. С един базов див  можем да сетнем стойностите навътре в него на много елементи. 

:visibility

:hidden - Заема си мястото, просто не не вижда. 
:visible
:collapse - Когато има някоя колона в таблица, която искаме да скрием. Не е една и съща в разл. браузъри. 

display: table; table-row; table-cell   - може да се направи таблица с дивове. Не е семантично правилно така да се прави таблица. 

Margin and Padding

margin - между кутийките

padding - от размера на кутийката до съдържанието. 

Стойностите са цели числа в px. Можем да задаваме отрицателни стойности. Важи както за padding, така и за margin. Стараем се да не използваме отриц. стойности. 

Има възможности за top, bottom, left, right; Като отделни стойности с - ;

margin- ите колапсват. Важи само за вертикалните маржини. Взема се по-голямата стойност и тя се визуализира. 

За ляво и дясно това не важи. 10+5 = 15 px   

margin: 5px; /5px 10px; /5px 3px 8px;/ 1px 3px 5px 2px; Отгоре по часовата стрелка. 

за padding важат същите правила. 

Второто правило овъррайдва първото, можем да променим само на отделна страна padding /margin

margin - започва да се брои от бордера нататък - навън. 

!!!!!Влизаме във стойността на margin/padding и със стрелките променяме стойностите, като отляво се променя картинката. Можем да нагласяваме лесно докато нацелим стойността. 

Вертикално margin колапсират.  Това не важи за ляво и дясно.

В браузъра да си тестваме !!!! Важно при margin/padding


Продължение на лекцията на Ники, 4.05.2015

Още нещо за margin, padding  имат left, right, top bottom

Самата страница си има някакви margin / padding Ресет: 
body {padding: 0px; margin: 0px;} когато искаме да вземем 100 % от екрана, който виждаме

Box Model

width / hight  - важат за съдържанието на елемента само. След това следват отстъпи, които са padding;  на родителския див елемент. Той има бордер и padding;

Границите на кутийката започват от бордера навън. с margin; При по-стари браузъри width/hight включва и бордера и падинга на родителския див. 

Друго нещо което влияе са пропертитата top left bottom right  Които показват откъде да започне нашата кутийка Сега има едно ново проперти. 

box-sizing: content - box 
/border-box - Ако искаме цялата кутийка да е указания брой пиксели. 

Поставяне на префикси за по-старите браузъри. При IE - border-box

В Inspector-a  променя стилове и по картинката с мишката. Всичко се визуализира в момента

Positioning

Един от начините е да позиционираме по марджин, но не е точно. Прецизното позициониране е с 

position: 

:static (default) Позициионира се когато не правим никакви промени по него. 

:relative - да отместим нашия елемент в сравнение с мястото, където би се позиционирала. 

:absolute - спрямо първия родител, който има нестатично позициониране. Ако няма такъв елемент, ще бъде позиционирано спрямо страницата. 

:fixed - да се залепи елемента на определено място. Другите елементи вече не се съобразяват със статичния елемент. т.е. той не заема място там. Вземаме кутийка и я залепяме някъде на страницата. Припокриване на елементи. Наслагване на елементи и прецизното им определяне в дълбочина позиция. Пропертито е z-index;

С него се определя кое да е най-отгоре. z-index - може да има положителни и отрицателни стойности. По-голямата стойност по-отгоре е!

Използваме или само top или bottom аналогично left/right; но не и двете!!!(top bottom)
Всяко абсолютно позициониране - търси се спрямо нестатичен позициониран елемент. родителски. 

Има линк за упражняване на позиционирането. 

vertical-align - Спрямо мястото отредено за съдържанието, къде да бъде подредено. Стойности: 
-10px; super; baseline; middle; top; bottom; inherit; initial; 

Друго използване на това проперти е когато имаме някакви кутийки Къде да бъде текста в кутийката. 
За наместване на картинка. 

Дивове с различни z-index - застъпване една върху друга, което се определя от z-index; Когато няма z-index - то е 0;

Floating

Позволява да залепим някакъв елемент вляво или вдясно. Елементът не излиза от сметките на другите елементи. За разлика от позиционирането по предишните начини. Останалите елементи се съобразяват с този флоутинг. Картинката която е float-на се обтича от текста 

Марджините на флоатните елементи не колапсват. Когато инлайн елементите имат флоат, можем да им дадем width / height;

Правилно е да се поставят флоатните елементи най-напред, и след това да се пише останалаат част от текста който ги обтича 

clear: left/right/both  Да ги упражним тези неща. клиървънето. Дадена е една статия, с линк. да я разучим!!! 
clearing and float;

Псевдокласът :after се използва за клиървъне
.clearfix: after{} - имам го отпреди. 

Специален код за IE старите версии за да клиърване. Дадено е като коментар, но IE го разбира. 

12. Демо с особеност включен е box-sizing: box-....

Накрая - някои неща за изпита

2 задачи но само 2 часа 1 и 2 задача от миналата година   Тестовете са в неговия github

На Chrome ще бъде теста. 




Записки по лекцията на Ивайло - 8.05.2015 г.

Има лекции за SASS, LESS, Styles with node.js

LESS - препроцесор за CSS   node.js - ако не използваме VS ни трябва. http://lesscss.org - за справка

Трябва да се парсне до нормален CSS. 

- променливи

- Mixins

- Color editing function

- Selector nesting - едно от най-важните неща тук. 

1. .less file

2. ....link rel=

<script src = "less.js"> </script> да вмъкнем тази библиотека. 

Във Вижуъл студио  в web.config

node.js  - сървърна технология, която дава възможност за стартиране на нашия компютър като сървър. 

Ако е необходимо добавяме в Path мястото където е node.js.

npm - package manager - възможност да инсталираме върху node. и JS. 

npm install less ^g  команда за инталиране

$ lessc {.less file} {.css file}

1. Нестване на селектори

&:hover   с & селектирам pdrent елемента. 

2. Променливи  дефинират се с @ Можем да си създадем много променливи, и когато ни трябват да си ги ползваме.  Добре е да са най-отгоре. Ако искаме, по-надолу може да ги предефинираме. 

@link-color: green; 

color:@ link-color; 

С променливите имаме и някакви операци, но дименсиите трябва да са еднакви. Примерно умножение, събиране, изваждане и т.н.

Другото което е чрез променливите имаме интерпола;ция - вкарване на текст,  Синтаксисът е примерно  @{border-...}
  
Друго е &:extend(.inline){ ...}   можем да екстендваме някакъв клас примерно.  Нещо като наследяване на другия клас. И наследяването е със , 

Друго е за изсветвяване или потъмняване на цветове.   lighten   darken 

Има и други функции. Математически функции, стринг - функции, върху цветове, върху типове и т.е. 




Записки за подготовка за изпит - Ники 11.05.2015 г. + Ивайло

2 вариант от 2014 г. 

В BgCoder пращаме 

Описание на задачата Описание Styles.css да изпратим.  

Картинка, която показва как да изглежда. Размери, цветове от тук. Да се доближим максимално до нея. 

Даден ни е началния css. 

1. В Chrome разглеждаме html на страницата. 

header - фискирана височина има.  paint.net  97px 

Reset na padding, margin!!!

Мери разстоянието от най-високата буква до края на полето - margin-top: 25px;

на другия елемент мери разстоянието - margin-top: 5px;

Дясната част. Оразмерява като гледа долу в реда на paint.net след маркиране на уголемена картинка, селектирано разстояние. 

Текста не е черен на основното съдържание, трябав да проверяваме за такива неща!!!!

text-transform: uppercase;

Pixel Perfect или PerfectPixel for Chrome  качва едната картинка и наслагва изображенията. Вижда къде има различия. и нагласява. 

Решава втората задача. 

При селектирането в paint.net има туул за селектиране по-удобен - с преместване на границите. 

Като вземе да стилизира определен елемент, на него прави зануляване padding:0; margin:0;


Продължение на лекцията подготовка за изпит - Ивайло

От април 2014 г. предполагам 4 вариант

Правим си празен проект един празен html файл 

с празен <img  src="" > 

правим си .less  и копираме дадения css  код. Да видя записа и видеото. 

Много пъти изглежда черно, но не е Проверяваме с colorPicker; 

На единия елемент ul -> float: right; на li -> float: left;




